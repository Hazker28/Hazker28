import asyncio
import logging
import random
import hashlib
import datetime
from typing import Union, Dict, List
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.types import (
    KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton,
    InlineKeyboardMarkup, Message, CallbackQuery
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import sqlite3
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8163139120:AAHg1QkcPAmiHPFWM0NIUtOj6G0OMVUyEpc"
OWNERS = [6673580092, 1690656583]  # ID –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞
DESTROY_CODE = hashlib.sha256("4a1049c94a03fa3ebd4f6694bea424669e0011051d4d00806b2fdc83117b8c82".encode()).hexdigest()
PRIVATE_CHANNEL_ID = -1002363437612  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
REVIEWS_CHANNEL_ID = -1002166881231  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
    
    
class UserStates(StatesGroup):
    captcha = State()
    entering_promo = State()
    task_submission = State()
    withdrawal_amount = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    mod_add = State()
    mod_remove = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    promo_create = State()
    promo_reward = State()
    promo_limit = State()
    promo_delete = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
    task_create_text = State()
    task_create_reward = State()
    task_create_limit = State()
    task_delete = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    search_user = State()
    give_stars_id = State()
    give_stars_amount = State()
    fine_user_id = State()
    fine_amount = State()
    ban_user_id = State()
    ban_reason = State()
    unban_user_id = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ª–∞–¥–∫–∏
    debug_mode = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY,
                  first_name TEXT,
                  role TEXT DEFAULT 'user',
                  balance INTEGER DEFAULT 0,
                  referrals INTEGER DEFAULT 0,
                  reg_date TEXT,
                  is_banned INTEGER DEFAULT 0,
                  ban_reason TEXT)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS promos
                 (code TEXT PRIMARY KEY,
                  reward INTEGER,
                  uses_left INTEGER,
                  total_uses INTEGER)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π
    c.execute('''CREATE TABLE IF NOT EXISTS tasks
                 (task_id INTEGER PRIMARY KEY,
                  description TEXT,
                  reward INTEGER,
                  uses_left INTEGER,
                  total_uses INTEGER)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    c.execute('''CREATE TABLE IF NOT EXISTS completed_tasks
                 (user_id INTEGER,
                  task_id INTEGER,
                  status TEXT,
                  proof_file_id TEXT,
                  moderator_id INTEGER,
                  UNIQUE(user_id, task_id))''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS mod_stats
                 (moderator_id INTEGER,
                  approved_tasks INTEGER DEFAULT 0,
                  rejected_tasks INTEGER DEFAULT 0,
                  date TEXT)''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def add_user(user_id: int, first_name: str, referrer_id: int = None):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    reg_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    role = "owner" if user_id in OWNERS else "user"
    
    c.execute("""
        INSERT OR IGNORE INTO users 
        (user_id, first_name, role, reg_date) 
        VALUES (?, ?, ?, ?)
    """, (user_id, first_name, role, reg_date))
    
    if referrer_id:
        c.execute("UPDATE users SET referrals = referrals + 1, balance = balance + 1 WHERE user_id = ?",
                 (referrer_id,))
    
    conn.commit()
    conn.close()

def get_user(user_id: int) -> dict:
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)).fetchone()
    
    conn.close()
    
    if user:
        return {
            "user_id": user[0],
            "first_name": user[1],
            "role": user[2],
            "balance": user[3],
            "referrals": user[4],
            "reg_date": user[5],
            "is_banned": user[6],
            "ban_reason": user[7]
        }
    return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏
def generate_captcha() -> tuple:
    fruits = ["üçé", "üçå", "üçá", "üçä", "üçê", "üçë", "üçì", "üçí"]
    correct = random.choice(fruits)
    options = random.sample(fruits, 4)
    if correct not in options:
        options[0] = correct
        random.shuffle(options)
    return correct, options

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(user_role: str) -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    
    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö
    common_buttons = [
        "üí´ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã",
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å",
        "üéü –ü—Ä–æ–º–æ–∫–æ–¥",
        "üìù –ó–∞–¥–∞–Ω–∏–µ",
        "üíé –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥",
        "üèÜ –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    ]
    
    for button in common_buttons:
        builder.add(KeyboardButton(text=button))
    
    if user_role == "moderator":
        builder.add(KeyboardButton(text="üë®‚Äç‚öñÔ∏è –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"))
    elif user_role == "owner":
        builder.add(KeyboardButton(text="üëë –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞"))
    
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user = get_user(message.from_user.id)
    
    if not user:
        args = message.text.split()
        referrer_id = None
        if len(args) > 1 and args[1].startswith('ref_'):
            try:
                referrer_id = int(args[1].split('_')[1])
            except:
                pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É
        correct, options = generate_captcha()
        
        builder = ReplyKeyboardBuilder()
        for option in options:
            builder.add(KeyboardButton(text=option))
        builder.adjust(2)
        
        await state.update_data(correct_captcha=correct, referrer_id=referrer_id)
        await state.set_state(UserStates.captcha)
        
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ {correct} –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        # ... (–æ—Å—Ç–∞–≤—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    else:
        if user["is_banned"]:
            await message.answer(f"‚õîÔ∏è –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n–ü—Ä–∏—á–∏–Ω–∞: {user['ban_reason']}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        keyboard = None
        if user["role"] == "owner":
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üí´ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
                    [KeyboardButton(text="üéü –ü—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton(text="üìù –ó–∞–¥–∞–Ω–∏–µ")],
                    [KeyboardButton(text="üíé –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥"), KeyboardButton(text="üèÜ –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
                    [KeyboardButton(text="üëë –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞")]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–ª–∞–¥–µ–ª—å—Ü–∞
                ],
                resize_keyboard=True
            )
        else:
            keyboard = get_main_keyboard(user["role"])
        
        await message.answer(
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–Ω–µ–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
@dp.message(lambda message: message.text == "üëë –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞")
async def owner_panel(message: types.Message):
    user = get_user(message.from_user.id)
    if user["role"] != "owner":
        return
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"), KeyboardButton(text="‚ûñ –£–≤–æ–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")],
            [KeyboardButton(text="üéü –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton(text="üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞")],
            [KeyboardButton(text="üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"), KeyboardButton(text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"), KeyboardButton(text="üë®‚Äç‚öñÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã")],
            [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")],
            [KeyboardButton(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å"), KeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å")],
            [KeyboardButton(text="üîç –ü–æ–∏—Å–∫"), KeyboardButton(text="‚≠êÔ∏è –î–∞—Ç—å –∑–≤—ë–∑–¥—ã")],
            [KeyboardButton(text="üí´ –û—à—Ç—Ä–∞—Ñ–æ–≤–∞—Ç—å"), KeyboardButton(text="üì® –ó–∞—è–≤–∫–∏")],
            [KeyboardButton(text="üõ† –û—Ç–ª–∞–¥–∫–∞"), KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    
    await message.answer("üëë –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞:", reply_markup=keyboard)

# –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    user = get_user(message.from_user.id)
    await message.answer(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard(user["role"])
    )

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è get_main_keyboard
def get_main_keyboard(user_role: str) -> ReplyKeyboardMarkup:
    if user_role == "owner":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üí´ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
                [KeyboardButton(text="üéü –ü—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton(text="üìù –ó–∞–¥–∞–Ω–∏–µ")],
                [KeyboardButton(text="üíé –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥"), KeyboardButton(text="üèÜ –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
                [KeyboardButton(text="üëë –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞")]
            ],
            resize_keyboard=True
        )
    else:
        # –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π
        buttons = [
            [KeyboardButton(text="üí´ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üéü –ü—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton(text="üìù –ó–∞–¥–∞–Ω–∏–µ")],
            [KeyboardButton(text="üíé –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥"), KeyboardButton(text="üèÜ –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")]
        ]
        
        if user_role == "moderator":
            buttons.append([KeyboardButton(text="üë®‚Äç‚öñÔ∏è –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")])
            
        return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@dp.message(UserStates.captcha)
async def process_captcha(message: types.Message, state: FSMContext):
    data = await state.get_data()
    correct_captcha = data.get("correct_captcha")
    referrer_id = data.get("referrer_id")
    
    if message.text == correct_captcha:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        if referrer_id:
            add_user(message.from_user.id, message.from_user.first_name, referrer_id)
        else:
            add_user(message.from_user.id, message.from_user.first_name)
        
        await state.clear()
        await message.answer(
            "‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
            reply_markup=get_main_keyboard("user")
        )
    else:
        correct, options = generate_captcha()
        builder = ReplyKeyboardBuilder()
        for option in options:
            builder.add(KeyboardButton(text=option))
        builder.adjust(2)
        
        await state.update_data(correct_captcha=correct)
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ {correct}:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        
        
@dp.message(F.text == "üí´ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã")
async def earn_stars(message: types.Message):
    user = get_user(message.from_user.id)
    if user["is_banned"]:
        return
    
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start=ref_{message.from_user.id}"
    
    await message.answer(
        f"üåü –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã –º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:\n\n"
        f"1Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ:\n{ref_link}\n"
        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 1 –∑–≤–µ–∑–¥—É!\n\n"
        f"2Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ó–∞–¥–∞–Ω–∏—è'\n\n"
        f"3Ô∏è‚É£ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–æ–º–æ–∫–æ–¥'"
    )

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user = get_user(message.from_user.id)
    if user["is_banned"]:
        return
    
    await message.answer(
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        f"üÜî ID: {user['user_id']}\n"
        f"üë§ –ò–º—è: {user['first_name']}\n"
        f"üí´ –ë–∞–ª–∞–Ω—Å: {user['balance']} –∑–≤—ë–∑–¥\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user['referrals']}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['reg_date']}\n"
        f"üé≠ –†–æ–ª—å: {user['role']}"
    )

@dp.message(F.text == "üéü –ü—Ä–æ–º–æ–∫–æ–¥")
async def promo_code(message: types.Message, state: FSMContext):
    user = get_user(message.from_user.id)
    if user["is_banned"]:
        return
    
    await state.set_state(UserStates.entering_promo)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")

@dp.message(UserStates.entering_promo)
async def process_promo(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    promo = message.text.upper()
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    c.execute("SELECT reward, uses_left FROM promos WHERE code = ?", (promo,))
    promo_data = c.execute("SELECT reward, uses_left FROM promos WHERE code = ?", (promo,)).fetchone()
    
    if not promo_data:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    c.execute("CREATE TABLE IF NOT EXISTS used_promos (user_id INTEGER, promo TEXT, UNIQUE(user_id, promo))")
    try:
        c.execute("INSERT INTO used_promos (user_id, promo) VALUES (?, ?)", (user_id, promo))
        
        reward, uses_left = promo_data
        if uses_left > 0:
            c.execute("UPDATE promos SET uses_left = uses_left - 1 WHERE code = ?", (promo,))
            c.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (reward, user_id))
            
            conn.commit()
            await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {reward} –∑–≤—ë–∑–¥!")
        else:
            await message.answer("‚ùå –£ —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!")
    except sqlite3.IntegrityError:
        await message.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
    
    conn.close()
    await state.clear()

# –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π
@dp.message(F.text == "üìù –ó–∞–¥–∞–Ω–∏–µ")
async def show_tasks(message: types.Message):
    user = get_user(message.from_user.id)
    if user["is_banned"]:
        return
    
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    c.execute("""
        SELECT t.task_id, t.description, t.reward, t.uses_left 
        FROM tasks t 
        WHERE t.uses_left > 0 
        AND NOT EXISTS (
            SELECT 1 FROM completed_tasks ct 
            WHERE ct.task_id = t.task_id 
            AND ct.user_id = ?
        )
    """, (message.from_user.id,))
    
    tasks = c.fetchall()
    conn.close()
    
    if not tasks:
        await message.answer("üòî –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç!")
        return
    
    for task in tasks:
        task_id, description, reward, uses_left = task
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"task_{task_id}")]
        ])
        
        await message.answer(
            f"üìã –ó–∞–¥–∞–Ω–∏–µ #{task_id}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"üí´ –ù–∞–≥—Ä–∞–¥–∞: {reward} –∑–≤—ë–∑–¥\n"
            f"‚ö°Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {uses_left}",
            reply_markup=keyboard
        )

@dp.callback_query(lambda c: c.data.startswith('task_'))
async def task_submission(callback_query: CallbackQuery, state: FSMContext):
    task_id = int(callback_query.data.split('_')[1])
    await state.update_data(current_task_id=task_id)
    await state.set_state(UserStates.task_submission)
    
    await callback_query.message.answer(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:"
    )
    await callback_query.answer()

@dp.message(UserStates.task_submission, F.photo | F.video)
async def process_task_submission(message: Message, state: FSMContext):
    data = await state.get_data()
    task_id = data['current_task_id']
    
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    c.execute("SELECT user_id FROM users WHERE role = 'moderator'")
    moderators = c.fetchall()
    
    if not moderators:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
        conn.close()
        await state.clear()
        return
    
    moderator_id = random.choice(moderators)[0]
    
    # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    file_id = message.photo[-1].file_id if message.photo else message.video.file_id
    submission_id = random.randint(100000, 999999)
    
    c.execute("""
        INSERT INTO completed_tasks (user_id, task_id, status, proof_file_id, moderator_id)
        VALUES (?, ?, 'pending', ?, ?)
    """, (message.from_user.id, task_id, file_id, moderator_id))
    
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∫–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    await bot.send_message(
        PRIVATE_CHANNEL_ID,
        f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{submission_id}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}\n"
        f"üìã –ó–∞–¥–∞–Ω–∏–µ: #{task_id}"
    )
    
    if message.photo:
        await bot.send_photo(PRIVATE_CHANNEL_ID, file_id)
    else:
        await bot.send_video(PRIVATE_CHANNEL_ID, file_id)
    
    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
        "–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."
    )
    await state.clear()
    
# –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@dp.message(F.text == "üë®‚Äç‚öñÔ∏è –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
async def mod_panel(message: types.Message):
    user = get_user(message.from_user.id)
    if user["role"] != "moderator" and user["role"] != "owner":
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data="mod_tasks")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="mod_stats")]
    ])
    
    await message.answer("üë®‚Äç‚öñÔ∏è –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "mod_tasks")
async def show_mod_tasks(callback_query: CallbackQuery):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    c.execute("""
        SELECT ct.user_id, ct.task_id, ct.proof_file_id, t.reward
        FROM completed_tasks ct
        JOIN tasks t ON ct.task_id = t.task_id
        WHERE ct.moderator_id = ? AND ct.status = 'pending'
    """, (callback_query.from_user.id,))
    
    tasks = c.fetchall()
    conn.close()
    
    if not tasks:
        await callback_query.message.answer("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç!")
        await callback_query.answer()
        return
    
    for user_id, task_id, file_id, reward in tasks:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}_{task_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}_{task_id}")
            ]
        ])
        
        await callback_query.message.answer_photo(
            file_id,
            caption=f"üìù –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n"
                   f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                   f"üìã –ó–∞–¥–∞–Ω–∏–µ #{task_id}\n"
                   f"üí´ –ù–∞–≥—Ä–∞–¥–∞: {reward} –∑–≤—ë–∑–¥",
            reply_markup=keyboard
        )
    
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith(('approve_', 'reject_')))
async def process_mod_decision(callback_query: CallbackQuery):
    action, user_id, task_id = callback_query.data.split('_')
    user_id = int(user_id)
    task_id = int(task_id)
    
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    if action == 'approve':
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
        c.execute("SELECT reward FROM tasks WHERE task_id = ?", (task_id,))
        reward = c.fetchone()[0]
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        c.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (reward, user_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        today = datetime.datetime.now().strftime('%Y-%m-%d')
        c.execute("""
            INSERT OR REPLACE INTO mod_stats (moderator_id, approved_tasks, rejected_tasks, date)
            VALUES (?, 
                    COALESCE((SELECT approved_tasks + 1 FROM mod_stats 
                     WHERE moderator_id = ? AND date = ?), 1),
                    COALESCE((SELECT rejected_tasks FROM mod_stats 
                     WHERE moderator_id = ? AND date = ?), 0),
                    ?)
        """, (callback_query.from_user.id, callback_query.from_user.id, today,
              callback_query.from_user.id, today, today))
        
        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ #{task_id} –æ–¥–æ–±—Ä–µ–Ω–æ!\n"
            f"üí´ –ü–æ–ª—É—á–µ–Ω–æ {reward} –∑–≤—ë–∑–¥!"
        )
        
    else:  # reject
        c.execute("""
            INSERT OR REPLACE INTO mod_stats (moderator_id, approved_tasks, rejected_tasks, date)
            VALUES (?, 
                    COALESCE((SELECT approved_tasks FROM mod_stats 
                     WHERE moderator_id = ? AND date = ?), 0),
                    COALESCE((SELECT rejected_tasks + 1 FROM mod_stats 
                     WHERE moderator_id = ? AND date = ?), 1),
                    ?)
        """, (callback_query.from_user.id, callback_query.from_user.id, today,
              callback_query.from_user.id, today, today))
        
        await bot.send_message(
            user_id,
            f"‚ùå –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ #{task_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!\n"
            f"üîÑ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞."
        )
    
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
    c.execute("DELETE FROM completed_tasks WHERE user_id = ? AND task_id = ?", (user_id, task_id))
    conn.commit()
    conn.close()
    
    await callback_query.message.delete()
    await callback_query.answer("‚úÖ –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")

@dp.callback_query(lambda c: c.data == "mod_stats")
async def show_mod_stats(callback_query: CallbackQuery):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.datetime.now().strftime('%Y-%m-%d')
    c.execute("""
        SELECT COALESCE(SUM(approved_tasks), 0), COALESCE(SUM(rejected_tasks), 0)
        FROM mod_stats 
        WHERE moderator_id = ? AND date = ?
    """, (callback_query.from_user.id, today))
    today_stats = c.fetchone()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    c.execute("""
        SELECT COALESCE(SUM(approved_tasks), 0), COALESCE(SUM(rejected_tasks), 0)
        FROM mod_stats 
        WHERE moderator_id = ?
    """, (callback_query.from_user.id,))
    total_stats = c.fetchone()
    
    conn.close()
    
    await callback_query.message.answer(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–°–µ–≥–æ–¥–Ω—è:\n"
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {today_stats[0]}\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {today_stats[1]}\n\n"
        f"–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n"
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {total_stats[0]}\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {total_stats[1]}"
    )
    await callback_query.answer()

# –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
@dp.message(F.text == "üëë –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞")
async def owner_panel(message: types.Message):
    if message.from_user.id not in OWNERS:
        return
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"), KeyboardButton(text="‚ûñ –£–≤–æ–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")],
            [KeyboardButton(text="üéü –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton(text="üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞")],
            [KeyboardButton(text="üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"), KeyboardButton(text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"), KeyboardButton(text="üë®‚Äç‚öñÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã")],
            [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")],
            [KeyboardButton(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å"), KeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å")],
            [KeyboardButton(text="üîç –ü–æ–∏—Å–∫"), KeyboardButton(text="‚≠êÔ∏è –î–∞—Ç—å –∑–≤—ë–∑–¥—ã")],
            [KeyboardButton(text="üí´ –û—à—Ç—Ä–∞—Ñ–æ–≤–∞—Ç—å"), KeyboardButton(text="üì® –ó–∞—è–≤–∫–∏")],
            [KeyboardButton(text="üõ† –û—Ç–ª–∞–¥–∫–∞")]
        ],
        resize_keyboard=True
    )
    
    await message.answer("üëë –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞:", reply_markup=keyboard)
    
    
# –§—É–Ω–∫—Ü–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
async def add_mod_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in OWNERS:
        return
    
    await state.set_state(UserStates.mod_add)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ telegram_id –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:")

@dp.message(UserStates.mod_add)
async def add_mod_process(message: types.Message, state: FSMContext):
    try:
        mod_id = int(message.text)
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        c.execute("SELECT user_id FROM users WHERE user_id = ?", (mod_id,))
        if c.fetchone():
            c.execute("UPDATE users SET role = 'moderator' WHERE user_id = ?", (mod_id,))
            conn.commit()
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mod_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!")
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        
        conn.close()
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")
    
    await state.clear()
@dp.message(F.text == "‚ûñ –£–≤–æ–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
async def remove_mod_start(message: types.Message, state: FSMContext):
    user = get_user(message.from_user.id)
    if user["role"] != "owner":
        return
    await state.set_state(UserStates.mod_remove)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ telegram_id –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–æ–ª—å–Ω–µ–Ω–∏—è:")

@dp.message(UserStates.mod_remove)
async def remove_mod_process(message: types.Message, state: FSMContext):
    try:
        mod_id = int(message.text)
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        c.execute("UPDATE users SET role = 'user' WHERE user_id = ? AND role = 'moderator'", (mod_id,))
        
        if c.rowcount > 0:
            await message.answer(f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {mod_id} —É—Å–ø–µ—à–Ω–æ —É–≤–æ–ª–µ–Ω!")
            await bot.send_message(mod_id, "‚ö†Ô∏è –í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
        else:
            await message.answer("‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        conn.commit()
        conn.close()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")
    finally:
        await state.clear()
        
# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
async def bot_stats(message: types.Message):
    if message.from_user.id not in OWNERS:
        return
    
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    c.execute("SELECT COUNT(*) FROM users")
    total_users = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM users WHERE role = 'moderator'")
    total_mods = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM users WHERE is_banned = 1")
    banned_users = c.fetchone()[0]
    
    c.execute("SELECT SUM(balance) FROM users")
    total_stars = c.fetchone()[0] or 0
    
    c.execute("SELECT COUNT(*) FROM tasks WHERE uses_left > 0")
    active_tasks = c.fetchone()[0]
    
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üë®‚Äç‚öñÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {total_mods}\n"
        f"üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö: {banned_users}\n"
        f"‚≠êÔ∏è –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: {total_stars}\n"
        f"üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {active_tasks}"
    )

# –û—Ç–ª–∞–¥–∫–∞
@dp.message(F.text == "üõ† –û—Ç–ª–∞–¥–∫–∞")
async def debug_mode(message: types.Message, state: FSMContext):
    if message.from_user.id not in OWNERS:
        return
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    
    await state.set_state(UserStates.debug_mode)
    await message.answer(
        "üõ† –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

@dp.message(UserStates.debug_mode)
async def process_debug(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer(
            "‚úÖ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
            reply_markup=get_main_keyboard("owner")
        )
        return
    
    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        result = eval(message.text)  # –¢–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏! –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã
        await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è
@dp.message(Command("destroy"))
async def destroy_bot(message: types.Message):
    if message.from_user.id not in OWNERS:
        return
    
    try:
        code = message.text.split()[1]
        if hashlib.sha256(code.encode()).hexdigest() == DESTROY_CODE:
            # –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if os.path.exists('bot.db'):
                os.remove('bot.db')
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            current_file = os.path.abspath(__file__)
            if os.path.exists(current_file):
                os.remove(current_file)
            
            await message.answer("üí• –ë–æ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω!")
            await bot.close()
    except:
        pass

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
async def notify_owners(user_id: int, stars: int):
    if stars > 19:
        user = get_user(user_id)
        for owner_id in OWNERS:
            await bot.send_message(
                owner_id,
                f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['first_name']} (ID: {user_id})\n"
                f"–ø–æ–ª—É—á–∏–ª {stars} –∑–≤—ë–∑–¥!"
            )

# –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(F.text == "üèÜ –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def top_users(message: types.Message):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    c.execute("""
        SELECT user_id, first_name, balance 
        FROM users 
        WHERE is_banned = 0 
        ORDER BY balance DESC 
        LIMIT 10
    """)
    
    top = c.fetchall()
    conn.close()
    
    text = "üèÜ –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for i, (user_id, name, balance) in enumerate(top, 1):
        text += f"{i}. {name} - {balance} ‚≠êÔ∏è\n"
    
    await message.answer(text)
@dp.message(F.text == "üíé –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥")
async def withdraw_stars(message: types.Message):
    user = get_user(message.from_user.id)
    if user["is_banned"]:
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="15 –∑–≤—ë–∑–¥", callback_data="withdraw_15")],
        [InlineKeyboardButton(text="25 –∑–≤—ë–∑–¥", callback_data="withdraw_25")],
        [InlineKeyboardButton(text="50 –∑–≤—ë–∑–¥", callback_data="withdraw_50")],
        [InlineKeyboardButton(text="150 –∑–≤—ë–∑–¥", callback_data="withdraw_150")],
        [InlineKeyboardButton(text="350 –∑–≤—ë–∑–¥", callback_data="withdraw_350")],
        [InlineKeyboardButton(text="500 –∑–≤—ë–∑–¥", callback_data="withdraw_500")]
    ])
    
    await message.answer(
        f"üí´ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['balance']} –∑–≤—ë–∑–¥\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith('withdraw_'))
async def process_withdrawal(callback_query: CallbackQuery):
    amount = int(callback_query.data.split('_')[1])
    user = get_user(callback_query.from_user.id)
    
    if user['balance'] < amount:
        await callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    withdrawal_id = random.randint(100000, 999999)
    c.execute("""
        CREATE TABLE IF NOT EXISTS withdrawals 
        (id INTEGER PRIMARY KEY,
         user_id INTEGER,
         amount INTEGER,
         status TEXT,
         timestamp TEXT)
    """)
    
    c.execute("""
        INSERT INTO withdrawals (id, user_id, amount, status, timestamp)
        VALUES (?, ?, ?, 'pending', datetime('now'))
    """, (withdrawal_id, user['user_id'], amount))
    
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
    withdraw_message = (
        f"üíé –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #{withdrawal_id}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['first_name']} (ID: {user['user_id']})\n"
        f"üí´ –°—É–º–º–∞: {amount} –∑–≤—ë–∑–¥\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['reg_date']}\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user['referrals']}"
    )
    
    for owner_id in OWNERS:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", 
                                   callback_data=f"approve_withdraw_{withdrawal_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                                   callback_data=f"reject_withdraw_{withdrawal_id}")
            ]
        ])
        await bot.send_message(owner_id, withdraw_message, reply_markup=keyboard)
    
    await callback_query.message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} –∑–≤—ë–∑–¥ —Å–æ–∑–¥–∞–Ω–∞!\n"
        "–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )
    await callback_query.answer()

    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–∞–Ω–µ–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message(F.text == "üéü –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
async def create_promo_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in OWNERS:
        return
    await state.set_state(UserStates.promo_create)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")

@dp.message(UserStates.promo_create)
async def process_promo_code(message: types.Message, state: FSMContext):
    await state.update_data(promo_code=message.text.upper())
    await state.set_state(UserStates.promo_reward)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥):")

@dp.message(UserStates.promo_reward)
async def process_promo_reward(message: types.Message, state: FSMContext):
    try:
        reward = int(message.text)
        await state.update_data(reward=reward)
        await state.set_state(UserStates.promo_limit)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

@dp.message(UserStates.promo_limit)
async def process_promo_limit(message: types.Message, state: FSMContext):
    try:
        limit = int(message.text)
        data = await state.get_data()
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        c.execute("""
            INSERT INTO promos (code, reward, uses_left, total_uses)
            VALUES (?, ?, ?, ?)
        """, (data['promo_code'], data['reward'], limit, limit))
        
        conn.commit()
        conn.close()
        
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n"
            f"–ö–æ–¥: {data['promo_code']}\n"
            f"–ù–∞–≥—Ä–∞–¥–∞: {data['reward']} –∑–≤—ë–∑–¥\n"
            f"–õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {limit}"
        )
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
    finally:
        await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message(F.text == "üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
async def delete_promo_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in OWNERS:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state("delete_promo")

@dp.message(lambda message: message.state == "delete_promo")
async def delete_promo_process(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    c.execute("DELETE FROM promos WHERE code = ?", (message.text.upper(),))
    
    if c.rowcount > 0:
        await message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    else:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    conn.commit()
    conn.close()
    await state.clear()

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
@dp.message(F.text == "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
async def create_task_start(message: types.Message, state: FSMContext):
    user = get_user(message.from_user.id)
    if user["role"] != "owner":
        return
    await state.set_state(UserStates.task_create_text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")


@dp.message(UserStates.task_create_text)
async def process_task_text(message: types.Message, state: FSMContext):
    await state.update_data(task_text=message.text)
    await state.set_state(UserStates.task_create_reward)
    await message.answer("üí´ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥):")


@dp.message(UserStates.task_create_reward)
async def process_task_reward(message: types.Message, state: FSMContext):
    try:
        reward = int(message.text)
        await state.update_data(reward=reward)
        await state.set_state(UserStates.task_create_limit)
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")


@dp.message(UserStates.task_create_limit)
async def process_task_limit(message: types.Message, state: FSMContext):
    try:
        limit = int(message.text)
        data = await state.get_data()
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        c.execute("""
            INSERT INTO tasks (description, reward, uses_left, total_uses)
            VALUES (?, ?, ?, ?)
        """, (data['task_text'], data['reward'], limit, limit))
        
        task_id = c.lastrowid
        
        conn.commit()
        conn.close()
        
        await message.answer(
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
            f"ID: #{task_id}\n"
            f"–ù–∞–≥—Ä–∞–¥–∞: {data['reward']} –∑–≤—ë–∑–¥\n"
            f"–õ–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {limit}"
        )
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
    finally:
        await state.clear()
@dp.message(F.text == "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
async def delete_task_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in OWNERS:
        return
    await state.set_state("delete_task")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

@dp.message(lambda message: message.state == "delete_task")
async def delete_task_process(message: types.Message, state: FSMContext):
    try:
        task_id = int(message.text)
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        c.execute("DELETE FROM tasks WHERE task_id = ?", (task_id,))
        
        if c.rowcount > 0:
            await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        
        conn.commit()
        conn.close()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
    finally:
        await state.clear()

# –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message(F.text == "üë®‚Äç‚öñÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã")
async def list_moderators(message: types.Message):
    if message.from_user.id not in OWNERS:
        return
    
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    c.execute("SELECT user_id, first_name FROM users WHERE role = 'moderator'")
    moderators = c.fetchall()
    
    if moderators:
        text = "üìã –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
        for mod_id, name in moderators:
            text += f"üë§ {name} (ID: {mod_id})\n"
    else:
        text = "‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç!"
    
    conn.close()
    await message.answer(text)

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def search_user_start(message: types.Message, state: FSMContext):
    user = get_user(message.from_user.id)
    if user["role"] != "owner":
        return
    await state.set_state(UserStates.search_user)
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")


@dp.message(UserStates.search_user)
async def search_user_process(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    try:
        user_id = int(message.text)
        c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    except ValueError:
        c.execute("SELECT * FROM users WHERE first_name LIKE ?", (f"%{message.text}%",))
    
    users = c.fetchall()
    conn.close()
    
    if users:
        for user in users:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚≠êÔ∏è –î–∞—Ç—å –∑–≤—ë–∑–¥—ã", callback_data=f"give_stars_{user[0]}"),
                    InlineKeyboardButton(text="üí´ –®—Ç—Ä–∞—Ñ", callback_data=f"fine_{user[0]}")
                ],
                [
                    InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban_{user[0]}"),
                    InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"unban_{user[0]}")
                ]
            ])
            
            await message.answer(
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:\n"
                f"ID: {user[0]}\n"
                f"–ò–º—è: {user[1]}\n"
                f"–†–æ–ª—å: {user[2]}\n"
                f"–ë–∞–ª–∞–Ω—Å: {user[3]} –∑–≤—ë–∑–¥\n"
                f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user[4]}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[5]}\n"
                f"–ó–∞–±–∞–Ω–µ–Ω: {'–î–∞' if user[6] else '–ù–µ—Ç'}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞: {user[7] if user[7] else '–ù–µ—Ç'}",
                reply_markup=keyboard
            )
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    await state.clear()
    
    
@dp.message(F.text == "‚≠êÔ∏è –î–∞—Ç—å –∑–≤—ë–∑–¥—ã")
async def give_stars_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in OWNERS:
        return
    await state.set_state("give_stars_id")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@dp.message(lambda message: message.state == "give_stars_id")
async def give_stars_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(target_user_id=user_id)
        await state.set_state("give_stars_amount")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")
        await state.clear()

@dp.message(lambda message: message.state == "give_stars_amount")
async def give_stars_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        data = await state.get_data()
        user_id = data['target_user_id']
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        c.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
        
        if c.rowcount > 0:
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –∑–≤—ë–∑–¥!")
            await bot.send_message(
                user_id,
                f"üí´ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –∑–≤—ë–∑–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
            )
            # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
            await notify_owners(user_id, amount)
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        conn.commit()
        conn.close()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
    finally:
        await state.clear()

# –®—Ç—Ä–∞—Ñ
@dp.message(F.text == "üí´ –û—à—Ç—Ä–∞—Ñ–æ–≤–∞—Ç—å")
async def fine_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in OWNERS:
        return
    await state.set_state("fine_user_id")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@dp.message(lambda message: message.state == "fine_user_id")
async def fine_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(target_user_id=user_id)
        await state.set_state("fine_amount")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∏–ª–∏ '–≤–µ—Å—å' –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")
        await state.clear()

@dp.message(lambda message: message.state == "fine_amount")
async def fine_amount(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['target_user_id']
    
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    if message.text.lower() == "–≤–µ—Å—å":
        c.execute("UPDATE users SET balance = 0 WHERE user_id = ?", (user_id,))
        fine_text = "–≤–µ—Å—å –±–∞–ª–∞–Ω—Å"
    else:
        try:
            amount = int(message.text)
            c.execute("""
                UPDATE users 
                SET balance = CASE 
                    WHEN balance >= ? THEN balance - ?
                    ELSE 0 
                END 
                WHERE user_id = ?
            """, (amount, amount, user_id))
            fine_text = f"{amount} –∑–≤—ë–∑–¥"
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ '–≤–µ—Å—å'!")
            await state.clear()
            return
    
    if c.rowcount > 0:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω –Ω–∞ {fine_text}!")
        await bot.send_message(
            user_id,
            f"‚ö†Ô∏è –í—ã –±—ã–ª–∏ –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω—ã –Ω–∞ {fine_text}!"
        )
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    conn.commit()
    conn.close()
    await state.clear()

# –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text == "üö´ –ó–∞–±–∞–Ω–∏—Ç—å")
async def ban_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in OWNERS:
        return
    await state.set_state("ban_user_id")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:")

@dp.message(lambda message: message.state == "ban_user_id")
async def ban_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(target_user_id=user_id)
        await state.set_state("ban_reason")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")
        await state.clear()

@dp.message(lambda message: message.state == "ban_reason")
async def ban_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['target_user_id']
    reason = message.text
    
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    c.execute("""
        UPDATE users 
        SET is_banned = 1, ban_reason = ?, balance = 0 
        WHERE user_id = ?
    """, (reason, user_id))
    
    if c.rowcount > 0:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        await bot.send_message(
            user_id,
            f"‚õîÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    conn.commit()
    conn.close()
    await state.clear()

# –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text == "‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å")
async def unban_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in OWNERS:
        return
    await state.set_state("unban_user_id")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")

@dp.message(lambda message: message.state == "unban_user_id")
async def unban_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        c.execute("""
            UPDATE users 
            SET is_banned = 0, ban_reason = NULL 
            WHERE user_id = ?
        """, (user_id,))
        
        if c.rowcount > 0:
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω!")
            await bot.send_message(
                user_id,
                "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
            )
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        conn.commit()
        conn.close()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")
    finally:
        await state.clear()

# –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
@dp.message(F.text == "üì® –ó–∞—è–≤–∫–∏")
async def withdrawal_requests(message: types.Message):
    if message.from_user.id not in OWNERS:
        return
    
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    c.execute("""
        SELECT w.id, w.user_id, w.amount, u.first_name, w.timestamp
        FROM withdrawals w
        JOIN users u ON w.user_id = u.user_id
        WHERE w.status = 'pending'
    """)
    
    requests = c.fetchall()
    conn.close()
    
    if not requests:
        await message.answer("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ—Ç!")
        return
    
    for req in requests:
        req_id, user_id, amount, name, timestamp = req
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                    callback_data=f"approve_withdraw_{req_id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"reject_withdraw_{req_id}"
                )
            ]
        ])
        
        await message.answer(
            f"üì® –ó–∞—è–≤–∫–∞ #{req_id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} (ID: {user_id})\n"
            f"üí´ –°—É–º–º–∞: {amount} –∑–≤—ë–∑–¥\n"
            f"üìÖ –î–∞—Ç–∞: {timestamp}",
            reply_markup=keyboard
        )    


@dp.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
async def mod_stats_start(message: types.Message, state: FSMContext):
    user = get_user(message.from_user.id)
    if user["role"] != "owner":
        return
    
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    c.execute("SELECT user_id, first_name FROM users WHERE role = 'moderator'")
    moderators = c.fetchall()
    
    if not moderators:
        await message.answer("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    text = "üìä –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for mod_id, name in moderators:
        text += f"üë§ {name} (ID: {mod_id})\n"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{name}",
                callback_data=f"mod_stats_{mod_id}"
            )
        ])
    
    conn.close()
    await message.answer(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith('mod_stats_'))
async def show_mod_stats_detail(callback_query: CallbackQuery):
    mod_id = int(callback_query.data.split('_')[2])
    
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.datetime.now().strftime('%Y-%m-%d')
    c.execute("""
        SELECT COALESCE(SUM(approved_tasks), 0), COALESCE(SUM(rejected_tasks), 0)
        FROM mod_stats 
        WHERE moderator_id = ? AND date = ?
    """, (mod_id, today))
    today_stats = c.fetchone()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    c.execute("""
        SELECT COALESCE(SUM(approved_tasks), 0), COALESCE(SUM(rejected_tasks), 0)
        FROM mod_stats 
        WHERE moderator_id = ?
    """, (mod_id,))
    total_stats = c.fetchone()
    
    c.execute("SELECT first_name FROM users WHERE user_id = ?", (mod_id,))
    mod_name = c.fetchone()[0]
    
    conn.close()
    
    await callback_query.message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {mod_name}:\n\n"
        f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {today_stats[0]}\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {today_stats[1]}\n\n"
        f"–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n"
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {total_stats[0]}\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {total_stats[1]}"
    )
    await callback_query.answer()


@dp.error()
async def error_handler(update: types.Update, exception: Exception):
    for owner_id in OWNERS:
        await bot.send_message(
            owner_id,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n"
            f"Update: {update}\n"
            f"Error: {exception}"
        )

async def main():
    try:
        init_db()
        # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
        await bot.delete_webhook(drop_pending_updates=True)
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())