import asyncio
import logging
import random
import hashlib
import datetime
from typing import Union, Dict, List
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import aiosqlite
import os

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = '8163139120:AAHg1QkcPAmiHPFWM0NIUtOj6G0OMVUyEpc'
REQUIRED_CHANNELS = [-1002166881231]
OWNERS_IDS = [1690656583, 6673580092]
DEVELOPERS_IDS = [6675836752, 6673580092]
ADMIN_CHANNEL = -1002363437612
REVIEWS_CHANNEL = -1002166881231

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_for_promo = State()
    waiting_for_task_proof = State()
    waiting_for_withdrawal_amount = State()
    waiting_for_admin_command = State()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self, db_name: str = "bot_database.db"):
        self.db_name = db_name

    async def create_tables(self):
        async with aiosqlite.connect(self.db_name) as db:
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    rank TEXT DEFAULT 'user',
                    balance INTEGER DEFAULT 0,
                    referrer_id INTEGER,
                    join_date TIMESTAMP,
                    ban_status BOOLEAN DEFAULT FALSE,
                    warnings INTEGER DEFAULT 0,
                    total_referrals INTEGER DEFAULT 0
                )
            ''')

            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            await db.execute('''
                CREATE TABLE IF NOT EXISTS promo_codes (
                    code TEXT PRIMARY KEY,
                    reward INTEGER,
                    max_uses INTEGER,
                    current_uses INTEGER DEFAULT 0,
                    created_by INTEGER,
                    created_at TIMESTAMP
                )
            ''')

            # –¢–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            await db.execute('''
                CREATE TABLE IF NOT EXISTS used_promo_codes (
                    user_id INTEGER,
                    code TEXT,
                    used_at TIMESTAMP,
                    PRIMARY KEY (user_id, code)
                )
            ''')

            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS tasks (
                    task_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    channel_link TEXT,
                    reward INTEGER,
                    created_by INTEGER,
                    created_at TIMESTAMP,
                    status TEXT DEFAULT 'active',
                    max_participants INTEGER
                )
            ''')

            # –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS completed_tasks (
                    user_id INTEGER,
                    task_id INTEGER,
                    completed_at TIMESTAMP,
                    proof_message_id INTEGER,
                    status TEXT DEFAULT 'pending',
                    moderator_id INTEGER,
                    PRIMARY KEY (user_id, task_id)
                )
            ''')

            # –¢–∞–±–ª–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
            await db.execute('''
                CREATE TABLE IF NOT EXISTS moderator_actions (
                    action_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    moderator_id INTEGER,
                    action_type TEXT,
                    target_user_id INTEGER,
                    description TEXT,
                    timestamp TIMESTAMP
                )
            ''')

            await db.commit()

    async def add_user(self, user_id: int, username: str, first_name: str, referrer_id: int = None):
        async with aiosqlite.connect(self.db_name) as db:
            await db.execute('''
                INSERT OR IGNORE INTO users (user_id, username, first_name, referrer_id, join_date)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, username, first_name, referrer_id, datetime.datetime.now()))
            await db.commit()

    async def get_user(self, user_id: int):
        async with aiosqlite.connect(self.db_name) as db:
            async with db.execute('SELECT * FROM users WHERE user_id = ?', (user_id,)) as cursor:
                return await cursor.fetchone()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(user_rank: str) -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    builder.row(types.KeyboardButton(text="üåü –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã"))
    builder.row(types.KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
    builder.row(
        types.KeyboardButton(text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥"),
        types.KeyboardButton(text="üìã –ó–∞–¥–∞–Ω–∏—è")
    )
    builder.row(
        types.KeyboardButton(text="üí´ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥"),
        types.KeyboardButton(text="üèÜ –¢–æ–ø 10")
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–Ω–≥–∞
    if user_rank in ['moderator', 'admin', 'owner', 'developer']:
        builder.row(types.KeyboardButton(text="üõ† –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"))
    
    if user_rank in ['admin', 'owner', 'developer']:
        builder.row(types.KeyboardButton(text="‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"))
    
    if user_rank in ['owner', 'developer']:
        builder.row(types.KeyboardButton(text="üëë –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞"))

    return builder.as_markup(resize_keyboard=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

@dp.startup()
async def on_startup():
    await db.create_tables()
    logger.info("Bot started and database initialized")
    
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_stars = State()
    waiting_for_promo_code = State()
    waiting_for_promo_amount = State()
    waiting_for_promo_uses = State()
    waiting_for_task_link = State()
    waiting_for_task_reward = State()
    waiting_for_broadcast = State()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–Ω–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def is_admin(user_id: int) -> bool:
    async with aiosqlite.connect(db.db_name) as conn:
        async with conn.execute('SELECT rank FROM users WHERE user_id = ?', (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result:
                return result[0] in ['admin', 'owner', 'developer']
    return False

async def is_moderator(user_id: int) -> bool:
    async with aiosqlite.connect(db.db_name) as conn:
        async with conn.execute('SELECT rank FROM users WHERE user_id = ?', (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result:
                return result[0] in ['moderator', 'admin', 'owner', 'developer']
    return False

async def is_owner(user_id: int) -> bool:
    return user_id in OWNERS_IDS

async def is_developer(user_id: int) -> bool:
    return user_id in DEVELOPERS_IDS

async def check_subscription(user_id: int) -> bool:
    try:
        for channel_id in REQUIRED_CHANNELS:
            member = await bot.get_chat_member(channel_id, user_id)
            if member.status in ['left', 'kicked', 'banned']:
                return False
        return True
    except Exception as e:
        logger.error(f"Error checking subscription: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –∫–æ–º–∞–Ω–¥–µ start
    ref_id = None
    if len(message.text.split()) > 1:
        try:
            ref_id = int(message.text.split()[1])
        except ValueError:
            ref_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    async with aiosqlite.connect(db.db_name) as conn:
        async with conn.execute('SELECT * FROM users WHERE user_id = ?', (user_id,)) as cursor:
            existing_user = await cursor.fetchone()

        if not existing_user:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            if not await check_subscription(user_id):
                builder = InlineKeyboardBuilder()
                builder.row(types.InlineKeyboardButton(
                    text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                    url=f"https://t.me/{abs(REQUIRED_CHANNELS[0])}"
                ))
                builder.row(types.InlineKeyboardButton(
                    text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data="check_sub"
                ))
                
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
                    reply_markup=builder.as_markup()
                )
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.add_user(user_id, username, first_name, ref_id)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –Ω–∞—á–∏—Å–ª—è–µ–º –µ–º—É –∑–≤–µ–∑–¥—É
            if ref_id:
                await conn.execute(
                    'UPDATE users SET balance = balance + 1, total_referrals = total_referrals + 1 WHERE user_id = ?',
                    (ref_id,)
                )
                await conn.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                try:
                    await bot.send_message(
                        ref_id,
                        f"üéâ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n"
                        f"–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–∞ 1 –∑–≤–µ–∑–¥–∞ ‚≠ê"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify referrer: {e}")

            welcome_text = (
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!\n\n"
                "üåü –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π.\n"
                "üí´ –ó–≤—ë–∑–¥—ã –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏–∑—ã.\n\n"
                "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
            )
            
            await message.answer(welcome_text, reply_markup=get_main_keyboard('user'))
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            async with conn.execute('SELECT rank FROM users WHERE user_id = ?', (user_id,)) as cursor:
                rank = (await cursor.fetchone())[0]
            
            await message.answer(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!",
                reply_markup=get_main_keyboard(rank)
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query(F.data == "check_sub")
async def check_subscription_callback(callback: types.CallbackQuery):
    if await check_subscription(callback.from_user.id):
        await db.add_user(
            callback.from_user.id,
            callback.from_user.username,
            callback.from_user.first_name
        )
        await callback.message.edit_text(
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=None
        )
        await callback.message.answer(
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=get_main_keyboard('user')
        )
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã"
@dp.message(F.text == "üåü –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã")
async def earn_stars(message: types.Message):
    user_id = message.from_user.id
    ref_link = f"https://t.me/{(await bot.me()).username}?start={user_id}"
    
    text = (
        "üí´ –°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—ë–∑–¥:\n\n"
        "1Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ:\n"
        f"{ref_link}\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 1 –∑–≤–µ–∑–¥—É ‚≠ê\n\n"
        "2Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üìã –ó–∞–¥–∞–Ω–∏—è¬ª\n\n"
        "3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üéÅ –ü—Ä–æ–º–æ–∫–æ–¥¬ª\n\n"
        "4Ô∏è‚É£ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏ –∞–∫—Ü–∏—è—Ö –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ"
    )
    
    await message.answer(text)
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user_id = message.from_user.id
    
    async with aiosqlite.connect(db.db_name) as conn:
        async with conn.execute('''
            SELECT u.*, 
                   (SELECT COUNT(*) FROM users) as total_users,
                   (SELECT COUNT(*) FROM completed_tasks WHERE user_id = ? AND status = 'approved') as completed_tasks
            FROM users u 
            WHERE u.user_id = ?
        ''', (user_id, user_id)) as cursor:
            user_data = await cursor.fetchone()
    
    if not user_data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è")
        return

    rank_emoji = {
        'user': 'üë§',
        'moderator': 'üõ°',
        'admin': '‚öúÔ∏è',
        'owner': 'üëë',
        'developer': '‚ö°'
    }

    profile_text = (
        f"üì± ID: `{user_data[0]}`\n"
        f"üë§ –ò–º—è: {user_data[2]}\n"
        f"üèÖ –†–∞–Ω–≥: {rank_emoji.get(user_data[3], '‚ùì')} {user_data[3].title()}\n"
        f"‚≠ê –ë–∞–ª–∞–Ω—Å: {user_data[4]} –∑–≤—ë–∑–¥\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_data[9]}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user_data[11]}\n"
        f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user_data[8]}/3\n"
        f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {user_data[10]}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data[6]}"
    )

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π",
        callback_data=f"history_{user_id}"
    ))

    await message.answer(
        profile_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
@dp.callback_query(F.data.startswith("history_"))
async def show_history(callback: types.CallbackQuery):
    user_id = int(callback.data.split('_')[1])
    
    if callback.from_user.id != user_id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!", show_alert=True)
        return

    async with aiosqlite.connect(db.db_name) as conn:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with conn.execute('''
            SELECT operation_type, amount, timestamp 
            FROM operations 
            WHERE user_id = ? 
            ORDER BY timestamp DESC 
            LIMIT 5
        ''', (user_id,)) as cursor:
            operations = await cursor.fetchall()

    if not operations:
        await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞", show_alert=True)
        return

    history_text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n"
    for op in operations:
        history_text += f"{'‚ûï' if op[1] > 0 else '‚ûñ'} {abs(op[1])} ‚≠ê - {op[0]}\n"
        history_text += f"üìÖ {op[2]}\n\n"

    await callback.message.answer(history_text)

# –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
class PromoCode:
    def __init__(self, db_name: str):
        self.db_name = db_name

    async def create_promo(self, code: str, reward: int, max_uses: int, created_by: int) -> bool:
        async with aiosqlite.connect(self.db_name) as conn:
            try:
                await conn.execute('''
                    INSERT INTO promo_codes (code, reward, max_uses, created_by, created_at)
                    VALUES (?, ?, ?, ?, ?)
                ''', (code, reward, max_uses, created_by, datetime.datetime.now()))
                await conn.commit()
                return True
            except Exception as e:
                logger.error(f"Error creating promo code: {e}")
                return False

    async def use_promo(self, user_id: int, code: str) -> tuple[bool, str, int]:
        async with aiosqlite.connect(self.db_name) as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            async with conn.execute(
                'SELECT reward, max_uses, current_uses FROM promo_codes WHERE code = ?',
                (code,)
            ) as cursor:
                promo_data = await cursor.fetchone()

            if not promo_data:
                return False, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", 0

            reward, max_uses, current_uses = promo_data

            if current_uses >= max_uses:
                return False, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!", 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ
            async with conn.execute(
                'SELECT 1 FROM used_promo_codes WHERE user_id = ? AND code = ?',
                (user_id, code)
            ) as cursor:
                if await cursor.fetchone():
                    return False, "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!", 0

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
            await conn.execute('''
                INSERT INTO used_promo_codes (user_id, code, used_at)
                VALUES (?, ?, ?)
            ''', (user_id, code, datetime.datetime.now()))

            await conn.execute('''
                UPDATE promo_codes 
                SET current_uses = current_uses + 1 
                WHERE code = ?
            ''', (code,))

            # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await conn.execute('''
                UPDATE users 
                SET balance = balance + ? 
                WHERE user_id = ?
            ''', (reward, user_id))

            await conn.commit()
            return True, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞—á–∏—Å–ª–µ–Ω–æ {reward} ‚≠ê", reward

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–º–æ–∫–æ–¥"
@dp.message(F.text == "üéÅ –ü—Ä–æ–º–æ–∫–æ–¥")
async def promo_code_handler(message: types.Message, state: FSMContext):
    await state.set_state(UserStates.waiting_for_promo)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message(UserStates.waiting_for_promo)
async def process_promo_code(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "‚ùå –í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=get_main_keyboard('user')
        )
        return

    promo_system = PromoCode(db.db_name)
    success, message_text, reward = await promo_system.use_promo(
        message.from_user.id,
        message.text.strip().upper()
    )

    await state.clear()
    await message.answer(
        message_text,
        reply_markup=get_main_keyboard('user')
    )

    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if success:
        logger.info(
            f"User {message.from_user.id} used promo code {message.text} "
            f"and received {reward} stars"
        )
        
# –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π
class Task:
    def __init__(self, db_name: str):
        self.db_name = db_name

    async def create_task(self, channel_link: str, reward: int, created_by: int, max_participants: int) -> bool:
        async with aiosqlite.connect(self.db_name) as conn:
            try:
                await conn.execute('''
                    INSERT INTO tasks (channel_link, reward, created_by, created_at, max_participants)
                    VALUES (?, ?, ?, ?, ?)
                ''', (channel_link, reward, created_by, datetime.datetime.now(), max_participants))
                await conn.commit()
                return True
            except Exception as e:
                logger.error(f"Error creating task: {e}")
                return False

    async def get_active_tasks(self) -> list:
        async with aiosqlite.connect(self.db_name) as conn:
            async with conn.execute('''
                SELECT t.*, 
                       (SELECT COUNT(*) FROM completed_tasks WHERE task_id = t.task_id) as participants
                FROM tasks t 
                WHERE t.status = 'active' 
                AND (SELECT COUNT(*) FROM completed_tasks WHERE task_id = t.task_id) < t.max_participants
            ''') as cursor:
                return await cursor.fetchall()

    async def submit_task(self, user_id: int, task_id: int, proof_message_id: int) -> tuple[bool, str]:
        async with aiosqlite.connect(self.db_name) as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Ä–∞–Ω–µ–µ
            async with conn.execute(
                'SELECT 1 FROM completed_tasks WHERE user_id = ? AND task_id = ?',
                (user_id, task_id)
            ) as cursor:
                if await cursor.fetchone():
                    return False, "‚ùå –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            async with conn.execute('''
                SELECT t.max_participants, 
                       (SELECT COUNT(*) FROM completed_tasks WHERE task_id = t.task_id) as current_participants
                FROM tasks t 
                WHERE t.task_id = ?
            ''', (task_id,)) as cursor:
                task_data = await cursor.fetchone()
                
                if not task_data:
                    return False, "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
                
                if task_data[1] >= task_data[0]:
                    return False, "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–¥–∞–Ω–∏—è!"

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
            await conn.execute('''
                INSERT INTO completed_tasks (user_id, task_id, completed_at, proof_message_id)
                VALUES (?, ?, ?, ?)
            ''', (user_id, task_id, datetime.datetime.now(), proof_message_id))
            
            await conn.commit()
            return True, "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É!"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞–Ω–∏—è"
@dp.message(F.text == "üìã –ó–∞–¥–∞–Ω–∏—è")
async def show_tasks(message: types.Message):
    task_system = Task(db.db_name)
    tasks = await task_system.get_active_tasks()

    if not tasks:
        await message.answer("üòï –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
        return

    for task in tasks:
        task_id, channel_link, reward, _, created_at, status, max_participants, current_participants = task
        
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(
            text="üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª",
            url=channel_link
        ))
        builder.row(types.InlineKeyboardButton(
            text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            callback_data=f"submit_task_{task_id}"
        ))

        task_text = (
            f"üìã –ó–∞–¥–∞–Ω–∏–µ #{task_id}\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {channel_link}\n"
            f"‚≠ê –ù–∞–≥—Ä–∞–¥–∞: {reward} –∑–≤—ë–∑–¥\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {current_participants}/{max_participants}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at}\n\n"
            "üìù –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
            "1. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n"
            "2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ¬ª"
        )

        await message.answer(task_text, reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("submit_task_"))
async def submit_task_handler(callback: types.CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split('_')[2])
    await state.update_data(task_id=task_id)
    await state.set_state(UserStates.waiting_for_task_proof)
    
    await callback.message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.\n"
        "‚ùó –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
@dp.message(UserStates.waiting_for_task_proof, F.photo | F.video)
async def process_task_proof(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    task_id = state_data['task_id']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º proof_message_id –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    task_system = Task(db.db_name)
    success, response_text = await task_system.submit_task(
        message.from_user.id,
        task_id,
        message.message_id
    )

    await state.clear()
    await message.answer(
        response_text,
        reply_markup=get_main_keyboard('user')
    )

    if success:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        async with aiosqlite.connect(db.db_name) as conn:
            async with conn.execute(
                "SELECT user_id FROM users WHERE rank IN ('moderator', 'admin', 'owner', 'developer')"
            ) as cursor:
                moderators = await cursor.fetchall()

        if moderators:
            chosen_moderator = random.choice(moderators)[0]
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
            forwarded_msg = await message.forward(chosen_moderator)
            
            builder = InlineKeyboardBuilder()
            builder.row(
                types.InlineKeyboardButton(
                    text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                    callback_data=f"approve_task_{task_id}_{message.from_user.id}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"reject_task_{task_id}_{message.from_user.id}"
                )
            )

            await bot.send_message(
                chosen_moderator,
                f"üìã –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}\n"
                f"üìù –ó–∞–¥–∞–Ω–∏–µ: #{task_id}",
                reply_markup=builder.as_markup()
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
@dp.message(UserStates.waiting_for_task_proof, F.text == "üîô –û—Ç–º–µ–Ω–∞")
async def cancel_task_proof(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_main_keyboard('user')
    )
    
# –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@dp.message(F.text == "üõ° –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
async def moderator_panel(message: types.Message):
    if not await is_moderator(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!")
        return

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏",
        callback_data="mod_active_tasks"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        callback_data="mod_stats"
    ))
    
    await message.answer(
        "üõ° –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query(F.data == "mod_active_tasks")
async def show_active_moderator_tasks(callback: types.CallbackQuery):
    if not await is_moderator(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        return

    async with aiosqlite.connect(db.db_name) as conn:
        async with conn.execute('''
            SELECT ct.*, t.reward, u.first_name 
            FROM completed_tasks ct
            JOIN tasks t ON ct.task_id = t.task_id
            JOIN users u ON ct.user_id = u.user_id
            WHERE ct.moderator_id = ? AND ct.status = 'pending'
        ''', (callback.from_user.id,)) as cursor:
            tasks = await cursor.fetchall()

    if not tasks:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!", show_alert=True)
        return

    for task in tasks:
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(
                text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                callback_data=f"approve_task_{task[1]}_{task[0]}"
            ),
            types.InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=f"reject_task_{task[1]}_{task[0]}"
            )
        )

        await callback.message.answer(
            f"üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É #{task[1]}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {task[7]}\n"
            f"‚≠ê –ù–∞–≥—Ä–∞–¥–∞: {task[6]} –∑–≤—ë–∑–¥\n"
            f"üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {task[2]}",
            reply_markup=builder.as_markup()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
@dp.callback_query(F.data.startswith("approve_task_"))
async def approve_task(callback: types.CallbackQuery):
    if not await is_moderator(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        return

    _, task_id, user_id = callback.data.split('_')
    task_id, user_id = int(task_id), int(user_id)

    async with aiosqlite.connect(db.db_name) as conn:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
        async with conn.execute(
            'SELECT reward FROM tasks WHERE task_id = ?',
            (task_id,)
        ) as cursor:
            task_data = await cursor.fetchone()
            
        if not task_data:
            await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return

        reward = task_data[0]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        await conn.execute('''
            UPDATE completed_tasks 
            SET status = 'approved', moderator_id = ? 
            WHERE task_id = ? AND user_id = ?
        ''', (callback.from_user.id, task_id, user_id))

        await conn.execute('''
            UPDATE users 
            SET balance = balance + ? 
            WHERE user_id = ?
        ''', (reward, user_id))

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        await conn.execute('''
            INSERT INTO moderator_actions (moderator_id, action_type, target_user_id, description, timestamp)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            callback.from_user.id,
            'approve_task',
            user_id,
            f'Approved task #{task_id} with reward {reward}',
            datetime.datetime.now()
        ))

        await conn.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ #{task_id} –æ–¥–æ–±—Ä–µ–Ω–æ!\n"
            f"‚≠ê –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {reward} –∑–≤—ë–∑–¥."
        )
    except Exception as e:
        logger.error(f"Failed to notify user {user_id}: {e}")

    await callback.message.edit_text(
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task_id} –æ–¥–æ–±—Ä–µ–Ω–æ!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–æ: {reward} –∑–≤—ë–∑–¥",
        reply_markup=None
    )

@dp.callback_query(F.data.startswith("reject_task_"))
async def reject_task(callback: types.CallbackQuery):
    if not await is_moderator(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        return

    _, task_id, user_id = callback.data.split('_')
    task_id, user_id = int(task_id), int(user_id)

    async with aiosqlite.connect(db.db_name) as conn:
        await conn.execute('''
            UPDATE completed_tasks 
            SET status = 'rejected', moderator_id = ? 
            WHERE task_id = ? AND user_id = ?
        ''', (callback.from_user.id, task_id, user_id))

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        await conn.execute('''
            INSERT INTO moderator_actions (moderator_id, action_type, target_user_id, description, timestamp)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            callback.from_user.id,
            'reject_task',
            user_id,
            f'Rejected task #{task_id}',
            datetime.datetime.now()
        ))

        await conn.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            f"‚ùå –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ #{task_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    except Exception as e:
        logger.error(f"Failed to notify user {user_id}: {e}")

    await callback.message.edit_text(
        f"‚ùå –ó–∞–¥–∞–Ω–∏–µ #{task_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}",
        reply_markup=None
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query(F.data == "mod_stats")
async def show_moderator_stats(callback: types.CallbackQuery):
    if not await is_moderator(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        return

    async with aiosqlite.connect(db.db_name) as conn:
        async with conn.execute('''
            SELECT 
                COUNT(CASE WHEN status = 'approved' THEN 1 END) as approved,
                COUNT(CASE WHEN status = 'rejected' THEN 1 END) as rejected
            FROM completed_tasks 
            WHERE moderator_id = ?
        ''', (callback.from_user.id,)) as cursor:
            stats = await cursor.fetchone()

    stats_text = (
        "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {stats[0]}\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {stats[1]}\n"
        f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {stats[0] + stats[1]}"
    )

    await callback.message.edit_text(stats_text)
    
    
# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(F.text == "‚öúÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def admin_panel(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏",
        callback_data="admin_mod_manage"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        callback_data="admin_search_user"
    ))
    builder.row(types.InlineKeyboardButton(
        text="‚ö†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è–º–∏",
        callback_data="admin_punishments"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞",
        callback_data="admin_bot_stats"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫",
        callback_data="admin_check_subs"
    ))

    await message.answer(
        "‚öúÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
@dp.callback_query(F.data == "admin_mod_manage")
async def manage_moderators(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
        callback_data="add_moderator"
    ))
    builder.row(types.InlineKeyboardButton(
        text="‚ûñ –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
        callback_data="remove_moderator"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üìã –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤",
        callback_data="list_moderators"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_admin"
    ))

    await callback.message.edit_text(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query(F.data == "add_moderator")
async def add_moderator_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_user_id)
    await callback.message.edit_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(
                text="üîô –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_admin_action"
            )
        ).as_markup()
    )

@dp.message(AdminStates.waiting_for_user_id)
async def process_add_moderator(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return

    user_id = int(message.text)
    async with aiosqlite.connect(db.db_name) as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with conn.execute(
            'SELECT rank FROM users WHERE user_id = ?',
            (user_id,)
        ) as cursor:
            user_data = await cursor.fetchone()

        if not user_data:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            await state.clear()
            return

        if user_data[0] in ['admin', 'owner', 'developer']:
            await message.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            await state.clear()
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
        await conn.execute(
            'UPDATE users SET rank = ? WHERE user_id = ?',
            ('moderator', user_id)
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await conn.execute('''
            INSERT INTO admin_actions (admin_id, action_type, target_user_id, description, timestamp)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            message.from_user.id,
            'add_moderator',
            user_id,
            'Added as moderator',
            datetime.datetime.now()
        ))

        await conn.commit()

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!")
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é."
        )
    except Exception as e:
        logger.error(f"Failed to notify new moderator {user_id}: {e}")

# –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query(F.data == "remove_moderator")
async def list_moderators_for_removal(callback: types.CallbackQuery):
    async with aiosqlite.connect(db.db_name) as conn:
        async with conn.execute(
            'SELECT user_id, first_name FROM users WHERE rank = ?',
            ('moderator',)
        ) as cursor:
            moderators = await cursor.fetchall()

    if not moderators:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    for mod_id, mod_name in moderators:
        builder.row(types.InlineKeyboardButton(
            text=f"{mod_name} ({mod_id})",
            callback_data=f"remove_mod_{mod_id}"
        ))
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="admin_mod_manage"
    ))

    await callback.message.edit_text(
        "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("remove_mod_"))
async def remove_moderator(callback: types.CallbackQuery):
    mod_id = int(callback.data.split('_')[2])

    async with aiosqlite.connect(db.db_name) as conn:
        await conn.execute(
            'UPDATE users SET rank = ? WHERE user_id = ?',
            ('user', mod_id)
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await conn.execute('''
            INSERT INTO admin_actions (admin_id, action_type, target_user_id, description, timestamp)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            callback.from_user.id,
            'remove_moderator',
            mod_id,
            'Removed from moderators',
            datetime.datetime.now()
        ))

        await conn.commit()

    await callback.message.edit_text(
        f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {mod_id} —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏!"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            mod_id,
            "‚ÑπÔ∏è –í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é."
        )
    except Exception as e:
        logger.error(f"Failed to notify removed moderator {mod_id}: {e}")
        
        
# –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
@dp.callback_query(F.data == "admin_search_user")
async def search_user_start(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="üîç –ü–æ–∏—Å–∫ –ø–æ ID",
        callback_data="search_by_id"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üë§ –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏",
        callback_data="search_by_name"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_admin"
    ))

    await callback.message.edit_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "search_by_id")
async def search_by_id_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_user_id)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(
                text="üîô –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_admin_action"
            )
        ).as_markup()
    )

async def get_user_info(user_id: int) -> str:
    async with aiosqlite.connect(db.db_name) as conn:
        async with conn.execute('''
            SELECT u.*, 
                   (SELECT COUNT(*) FROM completed_tasks 
                    WHERE user_id = u.user_id AND status = 'approved') as completed_tasks,
                   (SELECT COUNT(*) FROM users WHERE referrer_id = u.user_id) as referrals
            FROM users u 
            WHERE u.user_id = ?
        ''', (user_id,)) as cursor:
            user_data = await cursor.fetchone()

        if not user_data:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"

        return (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            f"üÜî ID: {user_data[0]}\n"
            f"üë§ –ò–º—è: {user_data[2]}\n"
            f"üèÖ –†–∞–Ω–≥: {user_data[3]}\n"
            f"‚≠ê –ë–∞–ª–∞–Ω—Å: {user_data[4]} –∑–≤—ë–∑–¥\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_data[11]}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user_data[10]}\n"
            f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user_data[8]}/3\n"
            f"üö´ –ë–∞–Ω: {'–î–∞' if user_data[7] else '–ù–µ—Ç'}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data[6]}"
        )

@dp.message(AdminStates.waiting_for_user_id)
async def process_user_search(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return

    user_id = int(message.text)
    user_info = await get_user_info(user_id)

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="‚ö†Ô∏è –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
        callback_data=f"warn_user_{user_id}"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å",
        callback_data=f"ban_user_{user_id}"
    ))
    builder.row(types.InlineKeyboardButton(
        text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å",
        callback_data=f"unban_user_{user_id}"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="admin_search_user"
    ))

    await message.answer(user_info, reply_markup=builder.as_markup())
    await state.clear()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è–º–∏
@dp.callback_query(F.data.startswith("warn_user_"))
async def warn_user(callback: types.CallbackQuery):
    user_id = int(callback.data.split('_')[2])
    
    async with aiosqlite.connect(db.db_name) as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        async with conn.execute(
            'SELECT warnings, rank FROM users WHERE user_id = ?',
            (user_id,)
        ) as cursor:
            user_data = await cursor.fetchone()

        if not user_data:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        if user_data[1] in ['admin', 'owner', 'developer']:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", show_alert=True)
            return

        new_warnings = user_data[0] + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        await conn.execute(
            'UPDATE users SET warnings = ? WHERE user_id = ?',
            (new_warnings, user_id)
        )

        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π - –±–∞–Ω–∏–º
        if new_warnings >= 3:
            await conn.execute(
                'UPDATE users SET ban_status = TRUE WHERE user_id = ?',
                (user_id,)
            )
            ban_message = "\n‚õî –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!"
        else:
            ban_message = ""

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await conn.execute('''
            INSERT INTO admin_actions (admin_id, action_type, target_user_id, description, timestamp)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            callback.from_user.id,
            'warn_user',
            user_id,
            f'Warning {new_warnings}/3',
            datetime.datetime.now()
        ))

        await conn.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            f"‚ö†Ô∏è –í–∞–º –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!\n"
            f"–í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {new_warnings}/3\n"
            f"{ban_message}"
        )
    except Exception as e:
        logger.error(f"Failed to notify warned user {user_id}: {e}")

    await callback.answer(f"‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ! ({new_warnings}/3){ban_message}", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = await get_user_info(user_id)
    await callback.message.edit_text(user_info, reply_markup=callback.message.reply_markup)

# –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
@dp.message(F.text == "üëë –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞")
async def owner_panel(message: types.Message):
    if not await is_owner(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞!")
        return

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º",
        callback_data="owner_balance"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏",
        callback_data="owner_promo"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
        callback_data="owner_broadcast"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏",
        callback_data="owner_admins"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        callback_data="owner_stats"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π",
        callback_data="owner_actions"
    ))

    await message.answer(
        "üëë –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )
    
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞)
@dp.callback_query(F.data == "owner_balance")
async def manage_balance(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="‚ûï –í—ã–¥–∞—Ç—å –∑–≤—ë–∑–¥—ã",
        callback_data="add_stars"
    ))
    builder.row(types.InlineKeyboardButton(
        text="‚ûñ –ó–∞–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã",
        callback_data="remove_stars"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_owner"
    ))

    await callback.message.edit_text(
        "‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.in_(["add_stars", "remove_stars"]))
async def balance_operation_start(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data
    await state.update_data(action=action)
    await state.set_state(AdminStates.waiting_for_user_id)
    
    await callback.message.edit_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(
                text="üîô –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_owner_action"
            )
        ).as_markup()
    )

@dp.message(AdminStates.waiting_for_user_id)
async def process_balance_user_id(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return

    await state.update_data(target_user_id=int(message.text))
    await state.set_state(AdminStates.waiting_for_stars)
    
    await message.answer(
        "üí´ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(
                text="üîô –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_owner_action"
            )
        ).as_markup()
    )

@dp.message(AdminStates.waiting_for_stars)
async def process_balance_operation(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤—ë–∑–¥!")
        return

    state_data = await state.get_data()
    action = state_data['action']
    target_user_id = state_data['target_user_id']
    stars = int(message.text)

    async with aiosqlite.connect(db.db_name) as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with conn.execute(
            'SELECT balance FROM users WHERE user_id = ?',
            (target_user_id,)
        ) as cursor:
            user_data = await cursor.fetchone()

        if not user_data:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await state.clear()
            return

        current_balance = user_data[0]
        new_balance = current_balance + stars if action == "add_stars" else current_balance - stars

        if new_balance < 0:
            await message.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!")
            await state.clear()
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await conn.execute(
            'UPDATE users SET balance = ? WHERE user_id = ?',
            (new_balance, target_user_id)
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await conn.execute('''
            INSERT INTO owner_actions (owner_id, action_type, target_user_id, description, timestamp)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            message.from_user.id,
            'balance_operation',
            target_user_id,
            f'{"Added" if action == "add_stars" else "Removed"} {stars} stars',
            datetime.datetime.now()
        ))

        await conn.commit()

    operation_text = "–Ω–∞—á–∏—Å–ª–µ–Ω–æ" if action == "add_stars" else "—Å–Ω—è—Ç–æ"
    await message.answer(
        f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} {operation_text} {stars} ‚≠ê\n"
        f"üí´ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚≠ê"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            target_user_id,
            f"{'‚ûï' if action == 'add_stars' else '‚ûñ'} –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É {operation_text} {stars} ‚≠ê\n"
            f"üí´ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚≠ê"
        )
    except Exception as e:
        logger.error(f"Failed to notify user {target_user_id}: {e}")

    await state.clear()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ (–ø–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞)
@dp.callback_query(F.data == "owner_promo")
async def manage_promo(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥",
        callback_data="create_promo"
    ))
    builder.row(types.InlineKeyboardButton(
        text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥",
        callback_data="delete_promo"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤",
        callback_data="list_promos"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_owner"
    ))

    await callback.message.edit_text(
        "üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "create_promo")
async def create_promo_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_promo_code)
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(
                text="üîô –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_owner_action"
            )
        ).as_markup()
    )
    
# –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥
@dp.message(F.text == "üí´ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥")
async def withdraw_stars(message: types.Message):
    builder = InlineKeyboardBuilder()
    amounts = [15, 25, 50, 100, 150, 250, 500]
    
    for amount in amounts:
        builder.row(types.InlineKeyboardButton(
            text=f"‚≠ê {amount} –∑–≤—ë–∑–¥",
            callback_data=f"withdraw_{amount}"
        ))

    await message.answer(
        "üí´ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞:\n\n"
        "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 15 –∑–≤—ë–∑–¥\n"
        "‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 24 —á–∞—Å–æ–≤",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("withdraw_"))
async def process_withdrawal(callback: types.CallbackQuery):
    amount = int(callback.data.split('_')[1])
    user_id = callback.from_user.id

    async with aiosqlite.connect(db.db_name) as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        async with conn.execute(
            'SELECT balance FROM users WHERE user_id = ?',
            (user_id,)
        ) as cursor:
            user_data = await cursor.fetchone()

        if not user_data or user_data[0] < amount:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!", show_alert=True)
            return

        # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
        await conn.execute('''
            INSERT INTO withdrawal_requests (user_id, amount, status, created_at)
            VALUES (?, ?, ?, ?)
        ''', (user_id, amount, 'pending', datetime.datetime.now()))

        # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –∑–≤—ë–∑–¥—ã
        await conn.execute(
            'UPDATE users SET balance = balance - ? WHERE user_id = ?',
            (amount, user_id)
        )

        await conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in OWNERS_IDS + DEVELOPERS_IDS:
        try:
            builder = InlineKeyboardBuilder()
            builder.row(
                types.InlineKeyboardButton(
                    text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                    callback_data=f"approve_withdraw_{user_id}_{amount}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"reject_withdraw_{user_id}_{amount}"
                )
            )

            await bot.send_message(
                admin_id,
                f"üí´ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                f"‚≠ê –°—É–º–º–∞: {amount} –∑–≤—ë–∑–¥\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.datetime.now()}",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}")

    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!", show_alert=True)

# –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(F.text == "üèÜ –¢–æ–ø 10")
async def show_top_users(message: types.Message):
    async with aiosqlite.connect(db.db_name) as conn:
        async with conn.execute('''
            SELECT user_id, first_name, balance 
            FROM users 
            ORDER BY balance DESC 
            LIMIT 10
        ''') as cursor:
            top_users = await cursor.fetchall()

    if not top_users:
        await message.answer("üòï –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º.")
        return

    response = "üèÜ –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É:\n\n"
    for i, user in enumerate(top_users, 1):
        medal = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(i, "üë§")
        response += f"{medal} {i}. {user[1]}: {user[2]} ‚≠ê\n"

    await message.answer(response)

# –ö–æ–º–∞–Ω–¥–∞ /shop
@dp.message(Command("shop"))
async def shop_command(message: types.Message):
    async with aiosqlite.connect(db.db_name) as conn:
        async with conn.execute(
            'SELECT warnings FROM users WHERE user_id = ?',
            (message.from_user.id,)
        ) as cursor:
            user_data = await cursor.fetchone()

    if not user_data or user_data[0] == 0:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è —Å–Ω—è—Ç–∏—è!")
        return

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="üîÑ –°–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (50 ‚≠ê)",
        callback_data="remove_warning"
    ))

    await message.answer(
        f"‚ö†Ô∏è –£ –≤–∞—Å {user_data[0]} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n\n"
        "üí´ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–Ω—è—Ç–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: 50 –∑–≤—ë–∑–¥",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "remove_warning")
async def process_remove_warning(callback: types.CallbackQuery):
    async with aiosqlite.connect(db.db_name) as conn:
        async with conn.execute(
            'SELECT balance, warnings FROM users WHERE user_id = ?',
            (callback.from_user.id,)
        ) as cursor:
            user_data = await cursor.fetchone()

        if not user_data or user_data[0] < 50:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!", show_alert=True)
            return

        if user_data[1] == 0:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!", show_alert=True)
            return

        # –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –∑–≤—ë–∑–¥—ã
        await conn.execute('''
            UPDATE users 
            SET warnings = warnings - 1,
                balance = balance - 50 
            WHERE user_id = ?
        ''', (callback.from_user.id,))

        await conn.commit()

    await callback.answer("‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ!", show_alert=True)
    await callback.message.edit_text(
        "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n"
        f"üí´ –° –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç–æ 50 –∑–≤—ë–∑–¥\n"
        f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —É–º–µ–Ω—å—à–µ–Ω–æ"
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = (
        "üìö –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/shop - –ú–∞–≥–∞–∑–∏–Ω (—Å–Ω—è—Ç–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π)\n\n"
        "üí´ –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã:\n"
        "1. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n"
        "2. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã\n\n"
        "‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞:\n"
        "- –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–æ–≤\n"
        "- –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º—É–ª—å—Ç–∏-–∞–∫–∫–∞—É–Ω—Ç—ã\n"
        "- –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤—ã–¥–∞—é—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n"
        "- –ü–æ—Å–ª–µ 3-—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π - –±–∞–Ω\n\n"
        "üî∞ –†–∞–Ω–≥–∏:\n"
        "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
        "üõ° –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä\n"
        "‚öúÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
        "üëë –í–ª–∞–¥–µ–ª–µ—Ü\n"
        "‚ö° –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
    )
    
    await message.answer(help_text)
    
# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(F.data == "owner_broadcast")
async def broadcast_start(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        callback_data="broadcast_text"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üñº –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ",
        callback_data="broadcast_photo"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_owner"
    ))

    await callback.message.edit_text(
        "üì¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("broadcast_"))
async def broadcast_type_select(callback: types.CallbackQuery, state: FSMContext):
    broadcast_type = callback.data.split('_')[1]
    await state.update_data(broadcast_type=broadcast_type)
    
    if broadcast_type == "text":
        await state.set_state(AdminStates.waiting_for_broadcast)
        await callback.message.edit_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(
                    text="üîô –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_owner_action"
                )
            ).as_markup()
        )
    else:
        await state.set_state(AdminStates.waiting_for_broadcast_photo)
        await callback.message.edit_text(
            "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(
                    text="üîô –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_owner_action"
                )
            ).as_markup()
        )

@dp.message(AdminStates.waiting_for_broadcast)
async def process_broadcast_text(message: types.Message, state: FSMContext):
    async with aiosqlite.connect(db.db_name) as conn:
        async with conn.execute('SELECT user_id FROM users WHERE ban_status = FALSE') as cursor:
            users = await cursor.fetchall()

    success_count = 0
    fail_count = 0

    for user in users:
        try:
            await bot.send_message(user[0], message.text)
            success_count += 1
            await asyncio.sleep(0.05)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            fail_count += 1
            logger.error(f"Failed to send broadcast to {user[0]}: {e}")

    await state.clear()
    await message.answer(
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {fail_count}"
    )

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏
@dp.callback_query(F.data == "owner_admins")
async def manage_admins(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞",
        callback_data="add_admin"
    ))
    builder.row(types.InlineKeyboardButton(
        text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞",
        callback_data="remove_admin"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤",
        callback_data="list_admins"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_owner"
    ))

    await callback.message.edit_text(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "list_admins")
async def list_admins(callback: types.CallbackQuery):
    async with aiosqlite.connect(db.db_name) as conn:
        async with conn.execute(
            "SELECT user_id, first_name FROM users WHERE rank = 'admin'"
        ) as cursor:
            admins = await cursor.fetchall()

    if not admins:
        await callback.answer("‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!", show_alert=True)
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    for admin in admins:
        text += f"üë§ {admin[1]} (ID: {admin[0]})\n"

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="owner_admins"
    ))

    await callback.message.edit_text(text, reply_markup=builder.as_markup())

# –ö–æ–º–∞–Ω–¥–∞ /destroy (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
@dp.message(Command("destroy"))
async def destroy_command(message: types.Message):
    if not await is_developer(message.from_user.id):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º!")
        return

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="üí£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ",
        callback_data="confirm_destroy"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üîô –û—Ç–º–µ–Ω–∞",
        callback_data="cancel_destroy"
    ))

    await message.answer(
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞!\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "confirm_destroy")
async def confirm_destroy(callback: types.CallbackQuery):
    if not await is_developer(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        return

    try:
        async with aiosqlite.connect(db.db_name) as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            async with conn.execute(
                "SELECT name FROM sqlite_master WHERE type='table'"
            ) as cursor:
                tables = await cursor.fetchall()

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            for table in tables:
                await conn.execute(f"DROP TABLE IF EXISTS {table[0]}")
            
            await conn.commit()

        await callback.message.edit_text(
            "üí£ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!\n"
            "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
        )

        logger.warning(f"Database destroyed by developer {callback.from_user.id}")

    except Exception as e:
        logger.error(f"Error during database destruction: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)

@dp.callback_query(F.data == "cancel_destroy")
async def cancel_destroy(callback: types.CallbackQuery):
    await callback.message.edit_text("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    
# –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (–ø–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞)
@dp.callback_query(F.data == "owner_stats")
async def show_full_stats(callback: types.CallbackQuery):
    async with aiosqlite.connect(db.db_name) as conn:
        stats = {}
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async with conn.execute('''
            SELECT 
                COUNT(*) as total_users,
                SUM(CASE WHEN ban_status = TRUE THEN 1 ELSE 0 END) as banned_users,
                SUM(balance) as total_stars,
                SUM(total_referrals) as total_refs
            FROM users
        ''') as cursor:
            stats['users'] = await cursor.fetchone()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–Ω–≥–∞–º
        async with conn.execute('''
            SELECT rank, COUNT(*) 
            FROM users 
            GROUP BY rank
        ''') as cursor:
            stats['ranks'] = await cursor.fetchall()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π
        async with conn.execute('''
            SELECT 
                COUNT(*) as total_tasks,
                SUM(CASE WHEN status = 'active' THEN 1 ELSE 0 END) as active_tasks,
                SUM(reward) as total_rewards
            FROM tasks
        ''') as cursor:
            stats['tasks'] = await cursor.fetchone()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        async with conn.execute('''
            SELECT 
                COUNT(*) as total_completed,
                SUM(CASE WHEN status = 'approved' THEN 1 ELSE 0 END) as approved,
                SUM(CASE WHEN status = 'rejected' THEN 1 ELSE 0 END) as rejected
            FROM completed_tasks
        ''') as cursor:
            stats['completed'] = await cursor.fetchone()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        async with conn.execute('''
            SELECT 
                COUNT(*) as total_promos,
                SUM(current_uses) as total_uses,
                SUM(reward * current_uses) as total_given
            FROM promo_codes
        ''') as cursor:
            stats['promos'] = await cursor.fetchone()

    current_time = datetime.datetime.utcnow()
    stats_text = (
        f"üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        f"üìÖ {current_time.strftime('%Y-%m-%d %H:%M:%S')} UTC\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        f"- –í—Å–µ–≥–æ: {stats['users'][0]}\n"
        f"- –ó–∞–±–∞–Ω–µ–Ω–æ: {stats['users'][1]}\n"
        f"- –ó–≤—ë–∑–¥ –≤ –æ–±–æ—Ä–æ—Ç–µ: {stats['users'][2]} ‚≠ê\n"
        f"- –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['users'][3]}\n\n"
        f"üèÖ –†–∞–Ω–≥–∏:\n"
    )

    for rank in stats['ranks']:
        rank_emoji = {
            'user': 'üë§',
            'moderator': 'üõ°',
            'admin': '‚öúÔ∏è',
            'owner': 'üëë',
            'developer': '‚ö°'
        }.get(rank[0], '‚ùì')
        stats_text += f"- {rank_emoji} {rank[0].title()}: {rank[1]}\n"

    stats_text += (
        f"\nüìã –ó–∞–¥–∞–Ω–∏—è:\n"
        f"- –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {stats['tasks'][0]}\n"
        f"- –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['tasks'][1]}\n"
        f"- –°—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥: {stats['tasks'][2]} ‚≠ê\n\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
        f"- –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {stats['completed'][0]}\n"
        f"- –û–¥–æ–±—Ä–µ–Ω–æ: {stats['completed'][1]}\n"
        f"- –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['completed'][2]}\n\n"
        f"üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã:\n"
        f"- –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {stats['promos'][0]}\n"
        f"- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {stats['promos'][1]}\n"
        f"- –í—ã–¥–∞–Ω–æ –∑–≤—ë–∑–¥: {stats['promos'][2]} ‚≠ê"
    )

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
        callback_data="export_stats"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_owner"
    ))

    await callback.message.edit_text(
        stats_text,
        reply_markup=builder.as_markup()
    )

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dp.callback_query(F.data == "owner_actions")
async def track_actions(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="üë• –î–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤",
        callback_data="view_mod_actions"
    ))
    builder.row(types.InlineKeyboardButton(
        text="‚öúÔ∏è –î–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–æ–≤",
        callback_data="view_admin_actions"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞",
        callback_data="view_recent_actions"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_owner"
    ))

    await callback.message.edit_text(
        "üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("view_"))
async def show_actions(callback: types.CallbackQuery):
    action_type = callback.data.split('_')[1]
    
    async with aiosqlite.connect(db.db_name) as conn:
        if action_type == "mod_actions":
            query = '''
                SELECT m.moderator_id, u.first_name, m.action_type, 
                       m.target_user_id, m.description, m.timestamp
                FROM moderator_actions m
                JOIN users u ON m.moderator_id = u.user_id
                ORDER BY m.timestamp DESC
                LIMIT 10
            '''
        elif action_type == "admin_actions":
            query = '''
                SELECT a.admin_id, u.first_name, a.action_type, 
                       a.target_user_id, a.description, a.timestamp
                FROM admin_actions a
                JOIN users u ON a.admin_id = u.user_id
                ORDER BY a.timestamp DESC
                LIMIT 10
            '''
        else:  # recent_actions
            query = '''
                SELECT '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä' as role, moderator_id as user_id, 
                       action_type, target_user_id, description, timestamp
                FROM moderator_actions
                WHERE timestamp >= datetime('now', '-1 day')
                UNION ALL
                SELECT '–ê–¥–º–∏–Ω' as role, admin_id as user_id, 
                       action_type, target_user_id, description, timestamp
                FROM admin_actions
                WHERE timestamp >= datetime('now', '-1 day')
                ORDER BY timestamp DESC
            '''

        async with conn.execute(query) as cursor:
            actions = await cursor.fetchall()

    if not actions:
        await callback.answer("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!", show_alert=True)
        return

    text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n\n"
    for action in actions:
        text += (
            f"üë§ {action[1]}\n"
            f"üîß –î–µ–π—Å—Ç–≤–∏–µ: {action[2]}\n"
            f"üéØ –¶–µ–ª—å: {action[3]}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {action[4]}\n"
            f"üìÖ –í—Ä–µ–º—è: {action[5]}\n"
            f"{'‚îÄ' * 20}\n"
        )

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(text) > 4096:
        for x in range(0, len(text), 4096):
            chunk = text[x:x+4096]
            await callback.message.answer(chunk)
    else:
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="owner_actions"
                )
            ).as_markup()
        )
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_any_action(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    
    if "owner" in callback.data:
        await callback.message.edit_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(
                    text="üîô –í –ø–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞",
                    callback_data="back_to_owner"
                )
            ).as_markup()
        )
    elif "admin" in callback.data:
        await callback.message.edit_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(
                    text="üîô –í –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    callback_data="back_to_admin"
                )
            ).as_markup()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_keyboard(await get_user_rank(callback.from_user.id))
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª–∏
@dp.callback_query(F.data == "back_to_owner")
async def back_to_owner_panel(callback: types.CallbackQuery):
    if not await is_owner(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        return
    await owner_panel(callback.message)

@dp.callback_query(F.data == "back_to_admin")
async def back_to_admin_panel(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        return
    await admin_panel(callback.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def unknown_command(message: types.Message):
    await message.answer(
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

async def init_db():
    await db.create_tables()
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await init_db()
    
    # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    logger.info(f"Bot started at {datetime.datetime.now()} UTC")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())